// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/occ/cmd/run (interfaces: Container)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	define "github.com/containers/podman/v4/libpod/define"
	containers "github.com/containers/podman/v4/pkg/bindings/containers"
	entities "github.com/containers/podman/v4/pkg/domain/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockContainer is a mock of Container interface.
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer.
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance.
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// CopyFromArchive mocks base method.
func (m *MockContainer) CopyFromArchive(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) (entities.ContainerCopyFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromArchive", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(entities.ContainerCopyFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromArchive indicates an expected call of CopyFromArchive.
func (mr *MockContainerMockRecorder) CopyFromArchive(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromArchive", reflect.TypeOf((*MockContainer)(nil).CopyFromArchive), arg0, arg1, arg2, arg3)
}

// Inspect mocks base method.
func (m *MockContainer) Inspect(arg0 context.Context, arg1 string, arg2 *containers.InspectOptions) (*define.InspectContainerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1, arg2)
	ret0, _ := ret[0].(*define.InspectContainerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockContainerMockRecorder) Inspect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockContainer)(nil).Inspect), arg0, arg1, arg2)
}
